from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.common import ManagedScroll
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.input.text import ManagedTextInput
from aiogram_dialog.widgets.kbd import SwitchTo
from aiogram_dialog.widgets.text import Const

from fanfan.application.exceptions import ServiceError
from fanfan.application.holder import AppHolder
from fanfan.common.utils import NOTIFICATIONS_PLURALS, pluralize
from fanfan.presentation.tgbot.dialogs import states
from fanfan.presentation.tgbot.dialogs.menus.schedule.common import (
    ID_SCHEDULE_SCROLL,
    SEARCH_QUERY,
    ScheduleWindow,
    show_event_page,
)
from fanfan.presentation.tgbot.dialogs.widgets import Title, get_delete_delivery_button
from fanfan.presentation.tgbot.ui import strings


async def swap_events_handler(
    message: Message,
    widget: ManagedTextInput,
    dialog_manager: DialogManager,
    data: str,
):
    app: AppHolder = dialog_manager.middleware_data["app"]

    # –ü–æ–∏—Å–∫
    if len(data.split()) == 1:
        dialog_manager.dialog_data[SEARCH_QUERY] = data
        scroll: ManagedScroll = dialog_manager.find(ID_SCHEDULE_SCROLL)
        await scroll.set_page(0)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –≤–≤–µ–¥–µ–Ω—ã –≤–µ—Ä–Ω–æ
    args = data.split()
    if len(args) != 2:
        await message.reply("‚ö†Ô∏è –í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è!")
        return
    if not (args[0].isnumeric() and args[1].isnumeric()):
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –Ω–æ–º–µ—Ä–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π!")
        return

    try:
        event1, event2, delivery_info = await app.schedule_mgmt.swap_events(
            int(args[0]), int(args[1])
        )
    except ServiceError as e:
        await message.reply(e.message)
        return

    await message.reply(
        f"‚úÖ –í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ <b>{event1.title}</b> –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{event2.title}</b>"
        f"–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {delivery_info.count} "
        f"{pluralize(delivery_info.count, NOTIFICATIONS_PLURALS)}\n",
        reply_markup=InlineKeyboardBuilder(
            [[get_delete_delivery_button(delivery_info.delivery_id)]]
        ).as_markup(),
    )
    await show_event_page(dialog_manager, event1.id)


swap_events_window = ScheduleWindow(
    state=states.SCHEDULE.SWAP_EVENTS,
    header=Title(
        Const("üîÉ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–≤—É—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏:"),
        upper=False,
        subtitle=Const("""(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: "5 2")"""),
    ),
    after_paginator=SwitchTo(
        state=states.SCHEDULE.MAIN,
        text=Const(strings.buttons.back),
        id="back",
    ),
    text_input=TextInput(
        id="swap_events_window_input",
        type_factory=str,
        on_success=swap_events_handler,
    ),
)
