from aiogram.types import CallbackQuery, Message
from aiogram_dialog import DialogManager, Window
from aiogram_dialog.widgets.input import ManagedTextInput, TextInput
from aiogram_dialog.widgets.kbd import Button, Counter, ManagedCounter, SwitchTo
from aiogram_dialog.widgets.text import Const, Jinja
from dishka import AsyncContainer

from fanfan.application.quest.add_points import AddPoints, AddPointsDTO
from fanfan.core.exceptions.users import TicketNotLinked
from fanfan.presentation.tgbot import states
from fanfan.presentation.tgbot.dialogs.user_manager.common import DATA_USER_ID
from fanfan.presentation.tgbot.ui import strings

ID_ADD_POINTS_COUNTER = "add_points_counter"
COMMENT = "add_points_comment"


async def add_points_getter(
    dialog_manager: DialogManager,
    container: AsyncContainer,
    **kwargs,
):
    counter: ManagedCounter = dialog_manager.find(ID_ADD_POINTS_COUNTER)
    comment = dialog_manager.dialog_data.get(COMMENT)
    return {"comment": comment, "ready_to_add": (counter.get_value() > 0) and comment}


async def add_comment_handler(
    message: Message,
    widget: ManagedTextInput,
    dialog_manager: DialogManager,
    data: str,
) -> None:
    dialog_manager.dialog_data[COMMENT] = data


async def add_points_handler(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
) -> None:
    container: AsyncContainer = manager.middleware_data["container"]
    add_points: AddPoints = await container.get(AddPoints)
    counter: ManagedCounter = manager.find(ID_ADD_POINTS_COUNTER)

    try:
        await add_points(
            AddPointsDTO(
                user_id=manager.start_data[DATA_USER_ID],
                points=int(counter.get_value()),
                comment=manager.dialog_data.get(COMMENT),
            )
        )
        await manager.switch_to(states.UserManager.user_info)
    except TicketNotLinked:
        await callback.answer("‚ö†Ô∏è –£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –±–∏–ª–µ—Ç", show_alert=True)


add_points_window = Window(
    Const(
        "üí∞ –° –ø–æ–º–æ—â—å—é —Å—á–µ—Ç—á–∏–∫–∞ —É–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –ø–æ–ª—É—á–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫, "
        "–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º, –∑–∞ —á—Ç–æ –æ–Ω–∏ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã"
    ),
    Const(" "),
    Const("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"),
    Jinja("<blockquote>{{ comment or '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...' }}</blockquote>"),
    Const(" "),
    Const("<i>(–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–≤–∏–¥—è—Ç —É—á–∞—Å—Ç–Ω–∏–∫ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã)</i>"),
    Counter(
        id=ID_ADD_POINTS_COUNTER,
        plus=Const("‚ûï"),
        minus=Const("‚ûñ"),
        min_value=0,
        max_value=5,
        default=0,
    ),
    Button(
        Const("‚úÖ –î–æ–±–∞–≤–∏—Ç—å"),
        id="add_points",
        on_click=add_points_handler,
        when="ready_to_add",
    ),
    TextInput(
        id="id_comment_input",
        type_factory=str,
        on_success=add_comment_handler,
    ),
    SwitchTo(
        Const(strings.buttons.back), id="back", state=states.UserManager.user_info
    ),
    getter=[add_points_getter],
    state=states.UserManager.add_points,
)
