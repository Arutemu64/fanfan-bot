import asyncio

from aiogram.types import Message
from aiogram_dialog import DialogManager, Window
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.input.text import ManagedTextInputAdapter
from aiogram_dialog.widgets.kbd import SwitchTo
from aiogram_dialog.widgets.text import Const
from sqlalchemy import and_

from src.bot.dialogs import states
from src.bot.dialogs.schedule.common import (
    EventsList,
    SchedulePaginator,
    get_events_query_terms,
    get_schedule,
    on_wrong_event_id,
    set_current_schedule_page,
)
from src.bot.ui import strings
from src.bot.utils import notifier
from src.db import Database
from src.db.models import Event


async def toggle_event_hidden(
    message: Message,
    widget: ManagedTextInputAdapter,
    dialog_manager: DialogManager,
    data: int,
):
    db: Database = dialog_manager.middleware_data["db"]

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ (—Å —É—á—ë—Ç–æ–º –ø–æ–∏—Å–∫–∞), –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    terms = get_events_query_terms(True, dialog_manager.dialog_data.get("search_query"))
    event = await db.event.get_by_where(and_(Event.id == data, *terms))
    if not event:
        text = "‚ö†Ô∏è –í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
        if dialog_manager.dialog_data.get("search_query"):
            text += "\n(—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–æ –≤—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞)"
        await message.reply(text)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ
    if event.current:
        await message.reply("‚ö†Ô∏è –¢–µ–∫—É—â–µ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Å–∫—Ä—ã—Ç–æ–µ")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–æ —Å–∫—Ä—ã—Ç–∏—è
    next_event_before = await db.event.get_next()

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å "—Å–∫—Ä—ã—Ç–æ" –¥–ª—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è
    event.hidden = not event.hidden
    await db.session.commit()

    # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if event.hidden:
        await message.reply(
            f"üôà –í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ <b>{event.participant.title if event.participant else event.title}</b> —Å–∫—Ä—ã—Ç–æ"
        )
    if not event.hidden:
        await message.reply(
            f"üôâ –í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ <b>{event.participant.title if event.participant else event.title}</b> –æ—Ç–∫—Ä—ã—Ç–æ"
        )

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è
    next_event_after = await db.event.get_next()

    # –ï—Å–ª–∏ —Å–∫—Ä—ã—Ç–∏–µ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ - —Ä–∞—Å—Å—ã–ª–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å
    if next_event_after is not next_event_before:
        send_global_announcement = True
    else:
        send_global_announcement = False

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
    asyncio.create_task(
        notifier.proceed_subscriptions(
            bot=message.bot, send_global_announcement=send_global_announcement
        )
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–∫—Ä—ã—Ç—ã–º/–æ—Ç–∫—Ä—ã—Ç—ã–º –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º
    await set_current_schedule_page(dialog_manager, event.id)
    await dialog_manager.switch_to(states.SCHEDULE.MAIN)


toggle_event_hidden_window = Window(
    Const("<b>üôà –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å/–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å:</b>"),
    EventsList,
    SchedulePaginator,
    TextInput(
        id="toggle_event_hidden",
        type_factory=int,
        on_success=toggle_event_hidden,
        on_error=on_wrong_event_id,
    ),
    SwitchTo(state=states.SCHEDULE.MAIN, text=Const(strings.buttons.back), id="back"),
    state=states.SCHEDULE.TOGGLE_EVENT_HIDDEN,
    getter=get_schedule,
)
