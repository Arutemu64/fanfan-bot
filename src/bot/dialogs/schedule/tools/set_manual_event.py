import asyncio

from aiogram import F
from aiogram.types import Message
from aiogram_dialog import DialogManager, Window
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.input.text import ManagedTextInput
from aiogram_dialog.widgets.kbd import SwitchTo
from aiogram_dialog.widgets.text import Const

from src.bot.dialogs import states
from src.bot.dialogs.schedule.common import (
    ID_SCHEDULE_SCROLL,
    EventsList,
    SchedulePaginator,
    main_schedule_getter,
    set_schedule_page,
    set_search_query,
)
from src.bot.dialogs.schedule.tools.common import (
    check_permission,
    throttle_announcement,
)
from src.bot.dialogs.schedule.utils import notifier
from src.bot.ui import strings
from src.db import Database


async def proceed_input(
    message: Message,
    widget: ManagedTextInput,
    dialog_manager: DialogManager,
    data: str,
):
    db: Database = dialog_manager.middleware_data["db"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not await check_permission(db, message.from_user.id):
        await message.reply(strings.errors.access_denied)
        return

    # –ü–æ–∏—Å–∫
    if not data.isnumeric():
        await set_search_query(message, widget, dialog_manager, data)
        return

    # –¢–∞–π–º–∞—É—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–Ω–æ–Ω—Å–æ–≤
    if await throttle_announcement(db):
        pass
    else:
        await message.answer(strings.errors.announce_too_fast)
        return

    # –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è
    if int(data) == 0:
        current_event = await db.event.get_current()
        if current_event:
            current_event.current = None
            await db.session.commit()
        await message.reply("‚úÖ –¢–µ–∫—É—â–µ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ!")
        await dialog_manager.find(ID_SCHEDULE_SCROLL).set_page(0)
        await dialog_manager.switch_to(states.SCHEDULE.MAIN)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —Å–∫—Ä—ã—Ç–æ
    new_current_event = await db.event.get(int(data))
    if not new_current_event:
        await message.reply("‚ö†Ô∏è –í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    if new_current_event.skip:
        await message.reply("‚ö†Ô∏è –°–∫—Ä—ã—Ç–æ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ —Å–Ω–∏–º–∞–µ–º —Å –Ω–µ–≥–æ —Ñ–ª–∞–≥ "—Ç–µ–∫—É—â–µ–µ"
    current_event = await db.event.get_current()
    if current_event:
        if current_event == new_current_event:
            await message.reply("‚ö†Ô∏è –≠—Ç–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ!")
            return
        current_event.current = None
        await db.session.flush([current_event])

    # –û—Ç–º–µ—á–∞–µ–º –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ
    new_current_event.current = True
    await db.session.commit()

    # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.reply(
        f"‚úÖ –í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ <b>{new_current_event.title}</b> –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ"
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
    asyncio.create_task(
        notifier.proceed_subscriptions(bot=message.bot, send_global_announcement=True)
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ–∫—É—â–∏–º –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º
    await set_schedule_page(dialog_manager, new_current_event)
    await dialog_manager.switch_to(states.SCHEDULE.MAIN)


set_manual_event_window = Window(
    Const("<b>üî¢ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–º:</b>"),
    Const("<i>(0 - —Å–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è)</i>\n"),
    EventsList,
    Const(
        "üîç <i>–î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>",
        when=~F["dialog_data"]["search_query"],
    ),
    SchedulePaginator,
    TextInput(
        id="manual_event_input",
        type_factory=str,
        on_success=proceed_input,
    ),
    SwitchTo(state=states.SCHEDULE.MAIN, text=Const(strings.buttons.back), id="back"),
    state=states.SCHEDULE.ASK_MANUAL_EVENT,
    getter=main_schedule_getter,
)
