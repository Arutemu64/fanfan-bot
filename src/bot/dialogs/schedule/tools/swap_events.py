import asyncio

from aiogram.types import Message
from aiogram_dialog import DialogManager, Window
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.input.text import ManagedTextInputAdapter
from aiogram_dialog.widgets.kbd import SwitchTo
from aiogram_dialog.widgets.text import Const
from sqlalchemy import and_

from src.bot.dialogs import states
from src.bot.dialogs.schedule.common import (
    EventsList,
    SchedulePaginator,
    get_events_query_terms,
    get_schedule,
    set_current_schedule_page,
)
from src.bot.ui import strings
from src.bot.utils import notifier
from src.db import Database
from src.db.models import Event


async def swap_events(
    message: Message,
    widget: ManagedTextInputAdapter,
    dialog_manager: DialogManager,
    data: str,
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –≤–≤–µ–¥–µ–Ω—ã –≤–µ—Ä–Ω–æ
    args = data.split()
    if len(args) != 2:
        await message.reply("‚ö†Ô∏è –í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è!")
        return
    if not (args[0].isnumeric() and args[1].isnumeric()):
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –Ω–æ–º–µ—Ä–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π!")
        return
    if args[0] == args[1]:
        await message.reply("‚ö†Ô∏è –ù–æ–º–µ—Ä–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å!")
        return

    db: Database = dialog_manager.middleware_data["db"]

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è (—Å —É—á—ë—Ç–æ–º –ø–æ–∏—Å–∫–∞), –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    terms = get_events_query_terms(True, dialog_manager.dialog_data.get("search_query"))
    event1 = await db.event.get_by_where(and_(Event.id == int(args[0]), *terms))
    event2 = await db.event.get_by_where(and_(Event.id == int(args[1]), *terms))
    if not event1 or not event2:
        text = "‚ö†Ô∏è –ü–∞—Ä–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        if dialog_manager.dialog_data.get("search_query"):
            text += "\n(—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ –≤—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞)"
        await message.reply(text)
        return

    # –ù–µ –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–æ (–∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ –ë–î) –º–µ–Ω—è–µ–º –ø–∞—Ä—É –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –º–µ—Å—Ç–∞–º–∏
    event1_position, event2_position = event1.position, event2.position
    event1.position, event2.position = event1.position * 10000, event2.position * 10000
    await db.session.flush([event1, event2])
    event1.position, event2.position = event2_position, event1_position
    await db.session.flush([event1, event2])
    await db.session.commit()

    # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.reply(
        f"‚úÖ –í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ <b>{event1.participant.title if event1.participant else event1.title}</b> –∑–∞–º–µ–Ω–µ–Ω–æ "
        f"–Ω–∞ <b>{event2.participant.title if event2.participant else event2.title}</b>"
    )

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ
    current_event = await db.event.get_current()

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å –ø–æ–≤–ª–∏—è–ª –Ω–∞ —Ç–µ–∫—É—â–µ–µ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è - —Ä–∞—Å—Å—ã–ª–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å
    if (event1.position in [current_event.position, current_event.position + 1]) or (
        event2.position in [current_event.position, current_event.position + 1]
    ):
        send_global_announcement = True
    else:
        send_global_announcement = False

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
    asyncio.create_task(
        notifier.proceed_subscriptions(
            bot=message.bot, send_global_announcement=send_global_announcement
        )
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–µ—Ä–≤—ã–º –∏–∑ –ø–µ—Ä–µ–Ω–æ—Å–∏–º—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π
    await set_current_schedule_page(dialog_manager, event1.id)
    await dialog_manager.switch_to(states.SCHEDULE.MAIN)


swap_events_window = Window(
    Const("<b>üîÉ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–≤—É—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏:</b>"),
    EventsList,
    SchedulePaginator,
    TextInput(
        id="swap_events_input",
        type_factory=str,
        on_success=swap_events,
    ),
    SwitchTo(state=states.SCHEDULE.MAIN, text=Const(strings.buttons.back), id="back"),
    state=states.SCHEDULE.SWAP_EVENTS,
    getter=get_schedule,
)
