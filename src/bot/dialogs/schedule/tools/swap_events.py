import asyncio

from aiogram import F
from aiogram.types import Message
from aiogram_dialog import DialogManager, Window
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.input.text import ManagedTextInputAdapter
from aiogram_dialog.widgets.kbd import SwitchTo
from aiogram_dialog.widgets.text import Const

from src.bot.dialogs import states
from src.bot.dialogs.schedule.common import (
    EventsList,
    SchedulePaginator,
    get_schedule,
    set_schedule_page,
    set_search_query,
)
from src.bot.dialogs.schedule.utils import notifier
from src.bot.ui import strings
from src.db import Database


async def swap_events(
    message: Message,
    widget: ManagedTextInputAdapter,
    dialog_manager: DialogManager,
    data: str,
):
    db: Database = dialog_manager.middleware_data["db"]

    if len(data.split()) == 1:
        await set_search_query(message, widget, dialog_manager, data)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –≤–≤–µ–¥–µ–Ω—ã –≤–µ—Ä–Ω–æ
    args = data.split()
    if len(args) != 2:
        await message.reply("‚ö†Ô∏è –í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è!")
        return
    if not (args[0].isnumeric() and args[1].isnumeric()):
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –Ω–æ–º–µ—Ä–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π!")
        return
    if args[0] == args[1]:
        await message.reply("‚ö†Ô∏è –ù–æ–º–µ—Ä–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    event1 = await db.event.get(int(args[0]))
    event2 = await db.event.get(int(args[1]))
    if not event1 or not event2:
        await message.reply("‚ö†Ô∏è –ü–∞—Ä–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
    current_event = await db.event.get_current()
    next_event_before = await db.event.get_next(current_event)

    # –ù–µ –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–æ (–∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ –ë–î) –º–µ–Ω—è–µ–º –ø–∞—Ä—É –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –º–µ—Å—Ç–∞–º–∏
    event1_position, event2_position = event1.position, event2.position
    event1.position, event2.position = event1.position * 10000, event2.position * 10000
    await db.session.flush([event1, event2])
    event1.position, event2.position = event2_position, event1_position
    await db.session.commit()
    await db.session.refresh(event1, ["real_position"])
    await db.session.refresh(event2, ["real_position"])

    # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.reply(
        f"‚úÖ –í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ <b>{event1.joined_title}</b> "
        f"–∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{event2.joined_title}</b>"
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞
    next_event_after = await db.event.get_next(current_event)

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å –ø–æ–≤–ª–∏—è–ª –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ - —Ä–∞—Å—Å—ã–ª–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å
    if next_event_after is not next_event_before:
        send_global_announcement = True
    else:
        send_global_announcement = False

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
    asyncio.create_task(
        notifier.proceed_subscriptions(
            bot=message.bot, send_global_announcement=send_global_announcement
        )
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–µ—Ä–≤—ã–º –∏–∑ –ø–µ—Ä–µ–Ω–æ—Å–∏–º—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π
    await set_schedule_page(dialog_manager, event1)


swap_events_window = Window(
    Const("<b>üîÉ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–≤—É—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏:</b>"),
    Const("""<i>(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: "5 2")</i>\n"""),
    EventsList,
    Const(
        "üîç <i>–î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>",
        when=~F["dialog_data"]["search_query"],
    ),
    SchedulePaginator,
    TextInput(
        id="swap_events_input",
        type_factory=str,
        on_success=swap_events,
    ),
    SwitchTo(state=states.SCHEDULE.MAIN, text=Const(strings.buttons.back), id="back"),
    state=states.SCHEDULE.SWAP_EVENTS,
    getter=get_schedule,
)
