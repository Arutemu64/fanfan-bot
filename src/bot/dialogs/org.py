import operator

import jwt
from aiogram import F
from aiogram.types import CallbackQuery, Message
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.input import ManagedTextInput, TextInput
from aiogram_dialog.widgets.kbd import (
    Button,
    Cancel,
    Column,
    Radio,
    Start,
    SwitchTo,
    Url,
)
from aiogram_dialog.widgets.text import Case, Const, Format, Jinja

from src.bot.dialogs import states
from src.bot.dialogs.widgets import Title
from src.bot.structures import UserRole
from src.bot.ui import strings
from src.config import conf
from src.db import Database
from src.db.models import Event, Nomination, User

ID_TICKET_ROLE_PICKER = "ticket_role_picker"


async def get_roles(**kwargs):
    return {
        "roles": [
            (UserRole.VISITOR, UserRole.get_role_name(UserRole.VISITOR)),
            (UserRole.HELPER, UserRole.get_role_name(UserRole.HELPER)),
            (UserRole.ORG, UserRole.get_role_name(UserRole.ORG)),
        ]
    }


# fmt: off
StatsTemplate = Jinja(  # noqa
    "{% for info in bot_info %}"
    "{% if info.name %}"
    """<b>{{ info.name }}</b>: {{ info.value }}\n"""
    "{% else %}"
    "\n\n"
    "{% endif %}"
    "{% for sub in info.subs %}"
    """ {{ "‚îú‚îÄ" if not loop.last else "‚îî‚îÄ" }}<b>{{ sub.name }}</b>: {{ sub.value }}\n"""  # noqa: E501
    "{% endfor %}"
    """{% endfor %}"""
)


# fmt: on


async def org_menu_getter(dialog_manager: DialogManager, db: Database, **kwargs):
    voting_enabled = await db.settings.get_voting_enabled()
    jwt_token = jwt.encode(
        payload={"user_id": dialog_manager.event.from_user.id},
        key=conf.bot.secret_key,
        algorithm="HS256",
    )
    return {
        "voting_enabled": voting_enabled,
        "web_panel_login_link": f"{conf.bot.web_panel_link}/login?token={jwt_token}",
        "bot_info": (
            {
                "name": "üé´ –ë–∏–ª–µ—Ç–æ–≤",
                "value": await db.ticket.get_count(),
            },
            {
                "name": "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "value": await db.user.get_count(),
                "subs": (
                    {
                        "name": "üëÄ –ó—Ä–∏—Ç–µ–ª–µ–π",
                        "value": await db.user.get_count(User.role == UserRole.VISITOR),
                    },
                    {
                        "name": "üì£ –í–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤",
                        "value": await db.user.get_count(User.role == UserRole.HELPER),
                    },
                    {
                        "name": "‚≠ê –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤",
                        "value": await db.user.get_count(User.role == UserRole.ORG),
                    },
                ),
            },
            {
                "name": "üíÉ –í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π",
                "value": await db.event.get_count(),
                "subs": (
                    {
                        "name": "ü´£ –ü—Ä–æ–ø—É—â–µ–Ω–æ",
                        "value": await db.event.get_count(Event.skip.is_(True)),
                    },
                ),
            },
            {
                "name": "üßë‚Äçüé§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                "value": await db.participant.get_count(),
            },
            {
                "name": "ü•à –ù–æ–º–∏–Ω–∞—Ü–∏–π",
                "value": await db.nomination.get_count(),
                "subs": (
                    {
                        "name": "ü•á –° –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º",
                        "value": await db.nomination.get_count(
                            Nomination.votable.is_(True)
                        ),
                    },
                ),
            },
            {
                "name": "üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤",
                "value": await db.vote.get_count(),
            },
        ),
    }


async def switch_voting(
    callback: CallbackQuery, button: Button, manager: DialogManager
):
    db: Database = manager.middleware_data["db"]
    await db.settings.toggle_voting()


async def add_new_ticket(
    message: Message,
    widget: ManagedTextInput,
    dialog_manager: DialogManager,
    data: str,
):
    db: Database = dialog_manager.middleware_data["db"]
    role = dialog_manager.find(ID_TICKET_ROLE_PICKER).get_checked()

    if await db.ticket.exists(data):
        await message.reply("‚ö†Ô∏è –ë–∏–ª–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    new_ticket = await db.ticket.new(id=data, role=role, issued_by=message.from_user.id)
    db.session.add(new_ticket)
    await db.session.commit()

    await message.answer(
        f"""‚úÖ –ë–∏–ª–µ—Ç "{new_ticket.id}" —Å —Ä–æ–ª—å—é {new_ticket.role} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"""
    )
    await dialog_manager.switch_to(states.ORG.MAIN)


new_ticket_window = Window(
    Const("‚úîÔ∏è –û—Ç–º–µ—Ç—å—Ç–µ —Ä–æ–ª—å –¥–ª—è –±–∏–ª–µ—Ç–∞ –Ω–∏–∂–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä"),
    Column(
        Radio(
            Format("üîò {item[1]}"),
            Format("‚ö™Ô∏è {item[1]}"),
            id=ID_TICKET_ROLE_PICKER,
            item_id_getter=operator.itemgetter(0),
            items="roles",
        ),
    ),
    TextInput(id="ticket_id", type_factory=str, on_success=add_new_ticket),
    SwitchTo(state=states.ORG.MAIN, id="org_menu", text=Const(strings.buttons.back)),
    getter=get_roles,
    state=states.ORG.NEW_TICKET,
)

org_menu = Window(
    Title(strings.titles.org_menu),
    Const("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:</b>\n"),
    StatsTemplate,
    Url(
        text=Const("üåê –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        url=Format("{web_panel_login_link}"),
    ),
    Start(
        state=states.USER_MANAGER.MANUAL_USER_SEARCH,
        id="user_search",
        text=Const("üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    ),
    SwitchTo(
        state=states.ORG.NEW_TICKET,
        id="new_ticket",
        text=Const("üé´ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –±–∏–ª–µ—Ç"),
    ),
    Button(
        text=Case(
            texts={
                True: Const("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"),
                False: Const("üü¢ –í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"),
            },
            selector=F["voting_enabled"],
        ),
        id="switch_voting_button",
        on_click=switch_voting,
    ),
    Cancel(Const(strings.buttons.back)),
    state=states.ORG.MAIN,
    getter=org_menu_getter,
)

dialog = Dialog(org_menu, new_ticket_window)
