from aiogram.types import CallbackQuery
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.kbd import Button, Cancel, Counter, ManagedCounter, SwitchTo
from aiogram_dialog.widgets.text import Const, Format, List

from src.bot.dialogs import states
from src.bot.dialogs.widgets import Title
from src.bot.ui import strings
from src.db import Database
from src.db.models import ReceivedAchievement

ID_ITEMS_PER_PAGE_INPUT = "items_per_page_input"


async def user_info_getter(dialog_manager: DialogManager, db: Database, **kwargs):
    user = await db.user.get(dialog_manager.event.from_user.id)
    return {
        "user": user,
        "user_info_list": [
            ("–ù–∏–∫–Ω–µ–π–º:", user.username),
            ("ID:", user.id),
            ("–†–æ–ª—å:", user.role.label),
        ],
    }


async def update_counter_value(
    callback: CallbackQuery, button: Button, manager: DialogManager
):
    db: Database = manager.middleware_data["db"]
    await manager.find(ID_ITEMS_PER_PAGE_INPUT).set_value(
        await db.user.get_items_per_page(manager.event.from_user.id)
    )


async def update_items_per_page(
    event: CallbackQuery,
    widget: ManagedCounter,
    dialog_manager: DialogManager,
):
    db: Database = dialog_manager.middleware_data["db"]
    await db.user.set_items_per_page(
        dialog_manager.event.from_user.id, int(widget.get_value())
    )
    await db.session.commit()
    await event.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
    await dialog_manager.switch_to(state=states.SETTINGS.MAIN)


async def reset_achievements_and_points(
    callback: CallbackQuery, button: Button, manager: DialogManager
):
    db: Database = manager.middleware_data["db"]
    await db.user.set_points(user_id=manager.event.from_user.id, points=0)
    achievements = await db.received_achievement._get_many(
        ReceivedAchievement.user_id == manager.event.from_user.id
    )
    for achievement in achievements:
        await db.session.delete(achievement)
    await db.session.commit()
    await callback.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")


set_items_per_page_window = Window(
    Const(
        "üî¢ <b>–£–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π/—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—ã–≤–æ–¥–∏—Ç—å "
        "–Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</b> <i>(–æ—Ç 3 –¥–æ 10)</i>"
    ),
    Counter(
        id=ID_ITEMS_PER_PAGE_INPUT,
        plus=Const("‚ûï"),
        minus=Const("‚ûñ"),
        min_value=3,
        max_value=10,
        text=Format("{value} ¬∑ üíæ"),
        on_text_click=update_items_per_page,
    ),
    state=states.SETTINGS.SET_ITEMS_PER_PAGE,
)

settings_window = Window(
    Title(strings.titles.settings),
    List(Format("<b>{item[0]}</b> {item[1]}"), items="user_info_list"),
    SwitchTo(
        text=Format("üî¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {user.items_per_page}"),
        id="set_items_per_page_button",
        on_click=update_counter_value,
        state=states.SETTINGS.SET_ITEMS_PER_PAGE,
    ),
    Button(
        text=Const("[–¢–ï–°–¢] ‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –æ—á–∫–∏"),
        id="reset_achievements_and_points",
        on_click=reset_achievements_and_points,
    ),
    Cancel(Const(strings.buttons.back)),
    state=states.SETTINGS.MAIN,
    getter=user_info_getter,
)

dialog = Dialog(settings_window, set_items_per_page_window)
