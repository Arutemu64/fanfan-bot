"""permissions_v3

Revision ID: 019
Revises: 018
Create Date: 2025-09-06 13:31:28.970918

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "019"
down_revision = "018"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("market_managers")
    op.drop_constraint("pk_user_permissions", "user_permissions", type_="primary")
    op.execute("CREATE SEQUENCE IF NOT EXISTS user_permissions_id_seq;")
    op.add_column(
        "user_permissions",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            server_default=sa.text("nextval('user_permissions_id_seq')"),
        ),
    )
    op.create_primary_key("pk_user_permissions", "user_permissions", ["id"])
    op.add_column(
        "user_permissions", sa.Column("object_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "user_permissions", sa.Column("object_type", sa.String(), nullable=True)
    )
    op.add_column(
        "user_permissions",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "user_permissions",
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.create_unique_constraint(
        op.f("uq_user_permissions_user_id"),
        "user_permissions",
        ["user_id", "permission_id", "object_id", "object_type"],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("uq_user_permissions_user_id"), "user_permissions", type_="unique"
    )
    op.drop_column("user_permissions", "updated_at")
    op.drop_column("user_permissions", "created_at")
    op.drop_column("user_permissions", "object_type")
    op.drop_column("user_permissions", "object_id")
    op.drop_column("user_permissions", "id")
    op.create_table(
        "market_managers",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("market_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["market_id"],
            ["markets.id"],
            name=op.f("fk_market_managers_market_id_markets"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_market_managers_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_market_managers")),
        sa.UniqueConstraint(
            "market_id",
            "user_id",
            name=op.f("uq_market_managers_market_id"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_primary_key(
        "pk_user_permissions", "user_permissions", ["user_id", "permission_id"]
    )
    # ### end Alembic commands ###
