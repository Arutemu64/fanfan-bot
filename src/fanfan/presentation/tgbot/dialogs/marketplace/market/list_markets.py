import typing
from typing import Any

from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager, Window
from aiogram_dialog.widgets.kbd import (
    Cancel,
    Column,
    CurrentPage,
    FirstPage,
    LastPage,
    NextPage,
    PrevPage,
    Row,
    Select,
    StubScroll,
)
from aiogram_dialog.widgets.text import Const, Format
from dishka import AsyncContainer

from fanfan.application.marketplace.read_markets_page import ReadMarketsPage
from fanfan.core.dto.page import Pagination
from fanfan.core.models.user import UserData
from fanfan.core.vo.market import MarketId
from fanfan.presentation.tgbot import states
from fanfan.presentation.tgbot.dialogs.common.widgets import Title
from fanfan.presentation.tgbot.dialogs.marketplace.common import DATA_SELECTED_MARKET_ID
from fanfan.presentation.tgbot.static import strings

ID_SELECT_MARKET = "select_market"
ID_MARKETS_SCROLL = "markets_scroll"

if typing.TYPE_CHECKING:
    from aiogram_dialog.widgets.common import ManagedScroll


async def list_markets_getter(
    dialog_manager: DialogManager,
    container: AsyncContainer,
    user: UserData,
    **kwargs,
):
    list_markets: ReadMarketsPage = await container.get(ReadMarketsPage)
    scroll: ManagedScroll = dialog_manager.find(ID_MARKETS_SCROLL)
    page = await list_markets(
        pagination=Pagination(
            limit=user.settings.items_per_page,
            offset=await scroll.get_page() * user.settings.items_per_page,
        )
    )
    pages = page.total // user.settings.items_per_page + bool(
        page.total % user.settings.items_per_page
    )
    return {
        "markets": page.items,
        "pages": pages or 1,
    }


async def on_market_selected(
    callback: CallbackQuery, widget: Any, manager: DialogManager, item_id: MarketId
):
    manager.dialog_data[DATA_SELECTED_MARKET_ID] = item_id
    await manager.switch_to(states.Marketplace.VIEW_MARKET)


list_markets_window = Window(
    Title(Const(strings.titles.marketplace)),
    Const(
        "<b>üõçÔ∏è –ú–∞—Ä–∫–µ—Ç</b> ‚Äî —ç—Ç–æ —Ä–∞–∑–¥–µ–ª, –≥–¥–µ —Å–æ–±—Ä–∞–Ω—ã —Ç–æ–≤–∞—Ä—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞–ª–ª–µ–∏ –∞–≤—Ç–æ—Ä–æ–≤ –∏ "
        "—è—Ä–º–∞—Ä–∫–∏. "
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ: "
        "–æ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—É–≤–µ–Ω–∏—Ä–æ–≤ –¥–æ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –∏–∑–¥–µ–ª–∏–π.\n\n"
        "üì¶ –ö–∞–∂–¥—ã–π –º–∞–≥–∞–∑–∏–Ω ‚Äî —ç—Ç–æ –≤–∏—Ç—Ä–∏–Ω–∞ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏, —Ñ–æ—Ç–æ –∏ —Ü–µ–Ω–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
        "üí¨ –í—ã —É—á–∞—Å—Ç–Ω–∏–∫ –∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–∞—Å—Ç—å –≤ ¬´–ú–∞—Ä–∫–µ—Ç¬ª? –ù–∞–ø–∏—à–∏—Ç–µ –∫—É—Ä–∞—Ç–æ—Ä—É —è—Ä–º–∞—Ä–∫–∏."
    ),
    Column(
        Select(
            Format("{item.name}"),
            id=ID_SELECT_MARKET,
            item_id_getter=lambda item: item.id,
            items="markets",
            type_factory=lambda value: MarketId(int(value)),
            on_click=on_market_selected,
        ),
    ),
    Row(
        StubScroll(ID_MARKETS_SCROLL, pages="pages"),
        FirstPage(scroll=ID_MARKETS_SCROLL, text=Const("‚è™")),
        PrevPage(scroll=ID_MARKETS_SCROLL, text=Const("‚óÄÔ∏è")),
        CurrentPage(
            scroll=ID_MARKETS_SCROLL,
            text=Format(text="{current_page1}/{pages}"),
        ),
        NextPage(scroll=ID_MARKETS_SCROLL, text=Const("‚ñ∂Ô∏è")),
        LastPage(scroll=ID_MARKETS_SCROLL, text=Const("‚è≠Ô∏è")),
    ),
    Cancel(Const(strings.buttons.back)),
    state=states.Marketplace.LIST_MARKETS,
    getter=list_markets_getter,
)
