"""float

Revision ID: 004
Revises: 003
Create Date: 2023-10-26 19:07:51.444496

"""
from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger

# revision identifiers, used by Alembic.
revision = '004'
down_revision = '003'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_schedule_update_real_position_trigger = PGTrigger(
        schema="public",
        signature="update_real_position_trigger",
        on_entity="public.schedule",
        is_constraint=False,
        definition='after insert or delete or update of skip, "position" \n        on public.schedule for each statement execute function update_real_position()'
    )
    public_update_real_position = PGFunction(
        schema="public",
        signature="update_real_position()",
        definition='RETURNS trigger\n     LANGUAGE plpgsql\n    AS $function$\n        begin\n            with sq as (\n                select\n                    id,\n                    case when schedule.skip = false then\n                        row_number() over (partition by schedule.skip order by schedule.position)\n                    else\n                        null\n                    end as rn\n                from schedule\n            )\n            update schedule\n            set real_position = sq.rn\n            from sq\n            where schedule.id = sq.id;\n            return null;\n        END;\n    $function$'
    )
    op.drop_entity(public_schedule_update_real_position_trigger)
    op.drop_entity(public_update_real_position)

    op.alter_column('schedule', 'position',
               existing_type=sa.INTEGER(),
               type_=sa.Float(),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('schedule_position_seq'::regclass)"))

    op.create_entity(public_update_real_position)
    op.create_entity(public_schedule_update_real_position_trigger)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_schedule_update_real_position_trigger = PGTrigger(
        schema="public",
        signature="update_real_position_trigger",
        on_entity="public.schedule",
        is_constraint=False,
        definition='after insert or delete or update of skip, "position" \n        on public.schedule for each statement execute function update_real_position()'
    )
    public_update_real_position = PGFunction(
        schema="public",
        signature="update_real_position()",
        definition='RETURNS trigger\n     LANGUAGE plpgsql\n    AS $function$\n        begin\n            with sq as (\n                select\n                    id,\n                    case when schedule.skip = false then\n                        row_number() over (partition by schedule.skip order by schedule.position)\n                    else\n                        null\n                    end as rn\n                from schedule\n            )\n            update schedule\n            set real_position = sq.rn\n            from sq\n            where schedule.id = sq.id;\n            return null;\n        END;\n    $function$'
    )
    op.drop_entity(public_schedule_update_real_position_trigger)
    op.drop_entity(public_update_real_position)

    op.alter_column('schedule', 'position',
               existing_type=sa.Float(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('schedule_position_seq'::regclass)"))

    op.create_entity(public_update_real_position)
    op.create_entity(public_schedule_update_real_position_trigger)
    # ### end Alembic commands ###
